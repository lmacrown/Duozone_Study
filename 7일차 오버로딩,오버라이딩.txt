생성자 오버로딩 : 중복정의
타입과 갯수만 확인, 순서도 달라도됨(해당하는 변수는 상관없음)
(내부적으로 메소드의 이름뿐만 아니라 타입(매개변수 수)까지 인식하여 메소드를 만듬)
생성자안에서 생성자를 호출할 수 있음. 인자가 같으면 호출됨
생성자 호출할때는 생성자가 제일 먼저 와야됨
메소드 오버로딩 : 메소드 이름은 같되 매개변수의 타입, 개수, 순서가 다른 메소드를 여러 개 선언

객체 생성의 목적은 초기화
가변길이 매개변수 : 클래스 선언시 int sum(int[] a) 대신에 int sum(int ... values)로 쓸수 있음
메소드가 가변길이 매개변수를 가지면 매개변수의 개수와 상관없이 매개값을 줄 수 있음
리턴문 이후에는 어떤 값을 써도 실행되지 않음
메소드 : 일반메소드. 생성자 메소드
생성자는 new를 통해 일반메서드는 객체명을 통해 생성

인스턴스 : 객체에 소속된 멤버
클래스에 소속된 변수는 공유 변수 또는 공유 함수(static)
static : 공유변수로 하나만 저장됨. 클래스 소속
접근할때 클래스.변수/메소드로 접근해야됨
static은 일반 메소드는 접근 불가능. static 메소드에서는 this로 접근할 수 없음. static으로 선언된 멤버만 사용됨
void setSpeed(int speed)=>(내부 모습)void setSpeed(Car this, int speed) = 일반함수의 경우만
=>참조변수에 자기 자신을 전달함.
스택이 힙보다 우선순위가 높음
멤버변수를 직접 호출해야됨(값을 설정하는 예외 조건이 없을때)
return : 스택 다음 위치 복구
로더 : 클래스파일(변수, 메소드), 멤버 메소드를 메모리로 올림. 코드가 손상됬는지 확인함
변수(필드) : 생성자를 통해서만 스택에 올림
스태틱 함수는 객체화를 할 필요가없음. 인스턴스는 객체화가 필요
정적 메소드 : 클래스가 멤버에 로딩이 될 때 한번만 실행. 인스턴스 멤버는 사용불가
