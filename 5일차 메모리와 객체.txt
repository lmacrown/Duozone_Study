참조 타입 : 배열 타입, 열거 타입, 클래스, 인터페이스
객체 : 데이터와 메소드로 구성된 덩어리
기본타입 : 정수 타입, 실수 타입, 논리 타입
인스턴스 : 
cpu : 계산 및 제어. 기억장소(레지스터)가 존재
스택 : 메소드를 호출할 때마다 생성되는 프레임이 저장되는 영역(p.147)
스택의 용도
1) 지역변수
2) 함수리턴주소 저장
String만 new(객체생성)을 하지않고 사용 가능. String str = "abcd"라 할 때 메모리가 str, "abcd" 두개가 생성됨
힙 : 메모리를 할당 받고 반환을 해줌. 반환 해주지 않으면 프로그램은 죽음.(new로 만드는 객체)
스택에서 참조변수를 사용하여 힙에 저장되어 있는 데이터에 접근함.
메모리 : 메소드, 스택(스레드 포함)과 힙(동적 메모리)
참조타입 변수는 ==으로 비교하면 값만 비교함으로 equals를 사용하여 해당 주소를 직접 비교해야됨
색인 배열 : 동일한 자료 메모리가 연속적으로 존재
int arr[]=> [] : 배열로서 참조하겠다는 표시
일반화 : 모두가 같은 <->특별화
모든 코딩은 일반화해야한다.
연관 배열 : ?
배열 비교 : Arrays.equals(arr1, arr2)
nullpointerexception : 값이 없는 데 접근을 시도할 경우 에러가 남
String str1 ="Hello"
String str2 =str1
str1="World" => str1은 hello를 가르키고 str2도 hello를 가르키나 str1은 world를 가르키고 str2는 hello를 가르킴
str1=null을 쓸 경우 지금 당장 해제되지는 않음
str1 = Hello st2=Hello 일 경우 메모리를  둘다 같은 곳에 할당함
따라서 메모리를 따로 쓰고 싶으면 new String("Hello")를 써야됨 
디버그시 id가 없으면 기본형, id가 있으면 참조형
F5 : 함수 안으로 들어가서 함수 코드 확인
F6 : 코드를 하나씩 실행
replace로 자바 문자열(힙에서 새로운 인덱스를 만듬)은 변경이 안되고 결과값만 바뀜.
substring (0,6) : 해당 문자열의 0부터 6 인덱스까지 받아옴. 숫자를 하나만 쓸경우 그 수부터 시작하여 맨끝까지 받아옴
indexof() : 해당 문자열이 없으면 -1을 반환. 해당 문자열이 있으면 시작지점의 인덱스 값을 반환
contains : 단순히 포함되어 있는지를 확인 시켜줌
split(",") : ,을 단위로 단어를 끊어서 배열을 만듬 

메모리를 순차적으로 계산하기 위해 순차(흐름)를 관리할 수 있는 IP(위치를 나타냄, 변수를 저장함) 또는 PC라고 부름
함수를 사용할 때 다시 돌아가기 위해? 메모리에 있는 stack을 사용
프로그램(PC or IP)이 계산할(함수)때 하나씩 증가함(메모리 주소값 만큼)
return : 함수를 호출하기 전으로 되돌아감
리턴할 때 레지스터를 아끼며 계산=> 함수 호출시 sp(변수 or 리턴주소)로 보냄
sp로 접근함.
1) PC는 함수를 수행하고 다음 계산할 것을 스택에 넣어두고 수행 후 스택에 있는 계산 하는 곳으로 이동
2) 지역변수를 생성하면 스택에 저장됨. 사용 후 데이터는 버림.
