객체 : 물리적으로 존재하거나 개념적인 것 중 다른것과 식별 가능한 것
객체 : 속성(필드), 동작(메서드) 구성
객체와 객체 간의 상호작용(메소드를 통해)을 이룸
매개값 : 전달하고자 하는 데이터. 메소드가 실행할때 필요한 값
집합관계 : 완성품과 구성품간의 관계
사용관계 : 다른 메서드를 호출, 사용, 변경하는 관계

상속 : 부모 자식 관계. 코드의 재사용성을 높임, 유지 보수의 시간을 절감
캡슐화 : 객체의 데이터, 동작을 하나로 묶고 실제 구현 내용을 외부에 감추는 것.사용하는 사람이 손쉽게
메서드만 알게 하기 위해서. 외부의 잘못된 사용으로 인해 객체가 손상되지 않도록 하기 위해 접근 제한자를 사용
다형성 : 사용방법은 동일하지만 실행결과가 다름. 

클래스 : 설계도 / 인스턴스 : 객체 
int(클래스) value(객체);
인스턴스 : 클래스로부터 생성된 객체
스태틱 : 클래스에 소속된 메서드
클래스 선언 : 소스 파일명과 동일하게 작성(단 외부에 노출되는 클래스만)=>접근 제한자는 한개만 작성 가능
public 클래스에서 선언되는 변수는 멤버 변수
new로 생성하는 객체는 힙에 저장됨
지역변수는 스택에 저장됨
student s1(스택에 저장) = new student()(힙에 저장)

라이브러리 클래스 : 실행할 수 없으며 다른 클래스에서 이용하는 클래스
실행 클래스 : main메소드를 가지고 있는 실행 가능한 클래스
메소드 : 생성자와 일반 메소드(return)로 구분
() : 메소드
클래스를 사용->객체를 생성
객체 생성 : Student s1 = new student() =>객체 s1를 생성하고 new를 생성하여 초기화후 student() 클래스
생성 후 ()메서드를 지정
메인에 s1이라는 참조변수 생성. 초기화시 0으로 생성되지만 참조변수로 볼때는 null로 본다
this : 객체 자신. 힙에 생성됨
공통적으로 사용되는 변수는 멤버변수로 올림
생성자 함수는 클래스 명하고 같음. 리턴 값과 void가 없음.

고유 데이터 :
상태 데이터 : 
필드 선언 : 타입 필드명; 생성자를 통해서 초기화함

객체 내부 : 클래스내에서 생성된 클래스 / 객체 외부 : main안