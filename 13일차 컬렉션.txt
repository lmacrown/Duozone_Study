join() : join 메서드를 가진 메서드도 실행 종료되어야 실행 가능
작업 스레드들이 모두 종료될때까지 메인 스레드를 기다리게함

컬랙션 : 자료구조를 바탕으로 객체들을 효율적으로추가, 삭제, 검색할 수 있도록 관련된 인터페이스와 
클래스들을 java.util 패키지에 포함시킨것
List : 순서를 유지하고 저장, 중복저장 가능
Set : 순서를 유지하지않고 저장, 중복 저장 안됨
Map : 키와 값으로 구성된 엔트리 저장, 키는 중복 저장 안됨

배열 
1. 색인 배열(Collection) : [색인번호]. 첨자로 접근
2. 연관 배열(Map) : key : value (Key : 보통 문자열, 객체

리스트컬렉션
추가 	-boolean add(E e) : 주어진 객체를 맨 끝에 추가
	-void add(int index, E element) : 주어진 인덱스에 객체를 추가
	-set(int index, E element) : 주어진 인덱스의 객체를 새로운 객체로 바꿈
검색 	-boolean contains(Object o)  : 주어진 객체가 저장되어 있는지 여부
	-E get(int index) : 주어진 인덱스에 저장된 객체를 리턴
	-isEmpty() : 컬렉션이 비어 있는지 조사
	-int size() : 저장되어 있는 전체 객체 수를 리턴
삭제	-void clear() : 저장된 모든 객체를 삭제
	-E remove (int index) : 주어진 인덱스에 저장된 객체를 삭제
	-boolean remove(Object o)  : 주어진 객체를 삭제 

!!!!!arrayList : List 컬렉션에서 가장 많이 사용하는 컬렉션. 제한 없이 객체를 추가할 수 있음
arraycopy : native 언어로 되어있어서 속도가 굉장히 빠름(JVM->어셈블->native언어)
배열에 관해서 특정위치에 삽입 삭제하면 안됨->list or linkedlist를 사용해야됨

벡터 : Arraylist와 동일한 내부 구조를 가지나 동기화된 메소드로 구성됨
=>멀티 스레드 환경에서는 안전하게 객체를 추가 또는 삭제

링크드리스트 : 불연속 데이터. 특정위치에서 객체를 삽입하거나 삭제하면 앞뒤 링크만 변경하면 되므로 
빈번한 객체 삭제와 삽입이 일어나는 곳에서 좋음

set컬랙션 : 저장 순서를 유지하지않아 값을 순서대로 찾을 수 없음. 유일함. 새로운 값이 들어가지않음.
객체를 중복해서 저장할 수 없음. 하나의 null값만 저장할 수 있음
추가	-boolean add(E e) : 주어진 객체를 성공적으로 저장하면 true 리턴, 중복 객체이면 false 리턴
검색	-boolean contains(Object o) : 주어진 객체가 저장되어 있는지 여부
	-isEmpty() : 비어 있는지 조사
	-Iterator<E> iterator : 저장된 객체를 한 번씩 가져오는 반복자 리턴
	-int size() : 저장되어 있는 전체 객체 수 리턴
삭제	-void clear() : 저장된 모든 객체를 삭제
	-boolean remove(Object o) : 주어진 객체를 삭제

HashSet : Set 컬렉션 중에서 가장 많이 사용. 
get함수로 특정위치를 찾을 수 없음=>Iterator() : 객체를 하나씩 가져옴
hasNext() : 다음 데이터가 있는지 확인
next() : 현재 포인터의 데이터를 찾아옴
문자열을 비교할때 상수문자를 앞에 두고 변수를 ()안에 넣음

Map 컬렉션 : 키와 값으로 구성된 엔트리 객체. 키와 값은 객체. 똑같은 값이 있으면 오버라이트 됨
추가	-V put(K key, V value) : 주어진 키와 값을 추가. 저장이 되면 값을 리턴
검색	-boolean containsKey(Object key) : 주어진 키가 있는지 확인
	-boolean containsValue(Object value) : 주어진 값이 있는지 확인
	-!Set<Map.Entry<K,V>>entrySet() : 모든 키와 값을 리턴
	-V get(Object key)  : 값을 엑세스함
	-boolean isEmpty() : 비어있는지 확인
	-Set<K> keySet() : 모든 키를 Set 객체에 담아서 리턴
	-int size() : 저장된 키의 총 수를 리턴
	-Collection<V> values() : 저장된 모든 값 Collection에 담아서 리턴
삭제 	-void clear()
	-V remove(Object key) : 주어진 키와 일치하는 엔트리 삭제




