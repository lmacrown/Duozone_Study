모든 객체의 최상위는 object
제네릭 : 결정되지 않은 타입을 파라미터로 처리하고 실제 사용할 때 파라미터를 구체적인 타입으로 대체시킴
public class Box<T>{ public T content;}
재네릭 메소드 : 타입 피라미터를 가짐. 리턴 타입 앞에 <> 기호를 추가(스태틱 메소드에서만 적용)
제한된 타입 파라미터 : 특정 타입과 자식 또는 구현 관계에있는 타입만 대체할 수 있는 타입 파라미터
ex. <T extends Number>: Number로 상속받은 자식 객체만 허용됨
와일드카드 타입 파라미터 : 
ex. <? super Worker> : Worker 또는 그 부모 객체만 허용됨

멀티 태스킹 : 두 가지 이상의 작업을 동시에 처리하는 것(멀티 스레드)
스레드 : 코드의 실행 흐름. 스택만 만들어짐(64kb)
멀티 프로세스 : 서로 독립적이므로 오류가 발생해도 다른 프로세스에 영향을 미치지 않음
프로세스 : 논리적으로 4기가를 차지함
스택은 개인것. 힙과 메소드는 공유함
PCB : 
TCB : CPU레지스터에 관한 정보를 저장
병렬처리 하는 법 : 프로세스 두개이상으로 돌림 , 프로세스를 여러 개의 스레드로 나눔
메인 스레드 : main()메소드를 실행하면서 시작하며 return 이나 마지막 코드를 만나면 실행 종료
멀티 스레드로 실행하는 프로그램을 개발하려면 먼저 몇 개의 작업을 병렬로 실행할지 결정하고 작업별로 스레드를 생성
메인 작업 이외에 추가적인 작업 수만큼 스레드를 생성해야 함. 
스레드의 갯수는 cpu와 동일한게 좋음
Runnable : 스레드가 작업을 실행할 때 사용하는 인터페이스=>run()메소드를 재정의 해아함
Thread를 자식 클래스로 생성가능(메서드를 재정의하여 사용)
스레드는 getName 또는 setName을 바로 쓸수 있음
Thread mainThread = Thread.currentThread(); : 현재 동작하고 있는 스레드의 정보를 가져옴
스레드 객체는 CPU에서 실행되는 데 실행->실행대기를 반복하다가 종료 또는 일시정지를 함
sleep() : 주어진 시간 동안 일시정지
join() : 스레드는 일시 정지가 되며 실행 대기 상태가 되려면  join메소드를 가진 스레드의 종료를 기다림
wait() : 블록내에서 일시정지
interrupt() : 일시정지 상태를 interruptedException을 발생시켜 실행 대기 또는 종료
notify()/notifyAll() : 일시정지 된 스레드를 한개씩/전체 깨울수 있음
yield() : 실행 대기 상태가 되고 다른 스레드에게 실행 양보. 잘 사용안함

