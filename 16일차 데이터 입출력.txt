BinaryOperator : 두 개의 매개값을 받아 하나의 값으로 리턴하는 apply()를 가짐. 람다식으로 작성가능
요소 수집 : 필요한 요소만 컬렉션에 담을 수 있고 요소들을 그룹핑한 후에 집계 가능
- Collectors.toList() : 해당 객체 안의 모든 값을 리스트 값으로 출력(toList() 로 사용가능)
- toMap() : 매핑하여 키,값으로 Map에 저장
요소 그룹핑 : 요소 수집 및 요소들을 그룹핑해서 Map객체를 생성하는 기능 제공
- groupingBy() : Function을 이용해서 T와 K로 매핑하고 K를 키로 해서 List<T>를 값으로 갖는 Map컬렉션을 생성
요소 병렬처리 : 멀티 코어 CPU 환경에서 전체 요소를 분할해서 각가의 코어가 병렬적으로 처리하는 것
멀티 스레드 실행 방법
1) 동시성 : 멀티 작업을 위해 멀티 스레드가 하나의 코어에서 번갈아 가며 실행하는 것
2) 병렬성 : 멀티 작업을 위해 멀티 코어를 각각 이용해서 병렬로 실행하는 것
1-데이터 병렬성 : 전체 데이터를 분할해서 서브 데이터셋으로 만들고 =>배열로 사용해야됨
이 서브 데이터셋들을 병렬 처리해서 작업을 빨리 끝냄(ex. 1~100까지 수의 합을 1~50 + 51~100의 합으로 나눔)
2-작업 병렬성 : 서로 다른 작업을 병렬 처리하는 것
포크조인 프레임워크 : 포크 단계에서 전체 요소들을 서브 요소셋으로 분할하고, 각각의 서브 요소셋을
멀티 코어에서 병렬로 처리
병렬처리 서능 
1) 요소의 수와 요소당 처리 시간 : 컬렉션에 전체 요소수가 적고 요소당 처리 시간이 짧으면 일반 스트림이 더 빠름
2) 스트림 소스의 종류 : Arraylist와 배열은 인덱스로 요소를 관리하기 때문에 요소를 쉽게 분리
HashSet, Treeset, LinkedList는 요소 분리가 쉽지 않음=>배열과 arraylist를 써야함
3) 코어의 수 : CPU 코어의 수가 많으면 많을수록 병렬 스트림의 성능은 좋아짐

cmd에서 \n : 명령어 입력
스트림 : 단방향으로 데이터가 흐르는 것(바이트)
최상위 클래스 - 바이트 스트림 : (Input/Output)Stream 문자 스트림 : Reader/Writer
입출력 방법으로 구분
1) !바이트 스트림 : 모든 종류의 데이터를 입출력할 때 사용
2) !문자 스트림 : 문자만 입출력할 때 사용
- flush() : 출력 버퍼에 잔류하는 모든 바이트를 출력(write() 함수는 4바이트씩 출력하기에 4바이트가 안되면 출력안함)
- close() : 출력 스트림을 닫고 사용 메모리 해제
문자 입출력 스트림 
- OutputStreamWriter : 캐릭터 단위(문자 단위)로 입출력 할 수 있음
- InputStreamReader : 캐릭터 단위(문자 단위)로 입출력 할 수 있음

보조 스트림 : 다른 스트림과 연결되어 여러가지 편리한 기능을 제공
UTF : 한글 한 문자는 3바이트
InputStreamReader() : 바이트 스트림을 문자 스트림으로 변환
Buffered() : 입출력 성능 향상

성능향상 스트림 : 메모리 버퍼와 작업함으로써 실행 성능을 향상시킬수 있음

기본타입 스트림 : 보조 스트림을 연결하며 기본 타입값을 입출력

객체 스트림 : 메모리에 생성된 객체를 파일 또는 네트워크로 풀력
1) 직렬화 : 필드값을 일렬로 늘어선 바이트로 변경
2) 역직렬화 : 직렬화된 바이트를 객체의 필드값으로 복원하는 것
Serializable : 멤버가 없는 빈 인터페이스. 객체를 직렬화할 수 있다고 표시하는 역할

File : 파일에 관련된 정보를 가짐
Files : 정적 메소드로 구성.객체를 만들 필요가 없음