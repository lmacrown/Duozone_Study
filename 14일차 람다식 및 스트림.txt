함수형 프로그래밍 : 함수를 정의하고 이 함수를 데이터 처리부로 보내 데이터를 처리하는 기법
데이터 처리부 : 제공된 함수의 입력값으로 데이터를 넣고 함수에 정의된 처리 내용을 실행
람다식 : 데이터 처리부에 제공되는 함수 역할을 하는 매개변수를 가진 중괄호 블록. 
단 하나의 추상 메서드만 가지고 있어야 한다
매개변수가 없을 경우 매개변수 부분을 () 으로 표시
리턴이 있는 함수일 경우 람다식 안에 리턴문을 써야함. 단 하나밖에 없을 경우 리턴문을 안씀
매개변수와 기능만 중요함
@FunctionalInterface : 함수형 인터페이스임을 보장하기 위해서 사용=>함수형으로 쓸 수 있는지 검증.

메소드 참조 : 람다식에서 매개변수값과 호출하는 메서드의 매개변수값이 같으면 생략하고 ->은 ::로 바꿈
ex. person.ordering((a,b)->a.compareToIgnoreCase(b));=>person.ordering(String :: compareToIgnoreCase); 
String은 a,b 매개변수의 타입
생성자 참조 : 생성자를 참조한다는 것
ex. (a,b)->{return new 클래스(a,b);} => 클래스 :: new

스트림 : 반복적인 일을 처리 할 때 시스템을 효율적으로 쓰기 위해 사용(스레드 상위버전)
=>처리내용을 메모리에서 CPU로 올리기때문에 속도가 굉장히 빠름
1) 내부 반복자이므로 처리 속도가 빠르고 병렬처리에 효율적이다
2) 람다식으로 다양항 요소 처리를 정의할수 있다
3) 중간 처리와 최종 처리를 수행하도록 파이프 라인을 형성 할 수 있다.
내부 반복자 : 컬렉션 내부로 주입시켜서 요소를 반복 처리
forEach() : 요소 처리 방법인 람다식을 제공. 반복문과 같은 배열 탐색 기법
parallelStream(): 병렬 처리 스트림

오리지널 스트림 -> 중간 스트림(필터링, 매핑)->집계 처리
중간 스트림 : 필러링(조건), 매핑, 정렬하는 작업을 수행
집계 처리 : 카운팅, 총합, 평균 작업 수행